// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team4930.robot.subsystems;

import org.usfirst.frc.team4930.robot.RobotMap;
import org.usfirst.frc.team4930.robot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.smartdashboard.*;


/**
 *
 */
public class Motors extends Subsystem {


    private final WPI_TalonSRX talonMaster = RobotMap.talonMaster;


    @Override
    public void initDefaultCommand() {
    	setDefaultCommand(new RunMotors());

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public void set(double speed) {
    	talonMaster.set(ControlMode.PercentOutput, speed);
    }
    
    public void setVelocity(double velocity) {
        // PID values
        talonMaster.config_kP(0, 1.0, 100);
        talonMaster.config_kI(0, 0.0007, 100);
        talonMaster.config_kD(0, 0.0007, 100);
        talonMaster.config_kF(0, 0.0001, 100);
        
        
    	talonMaster.set(ControlMode.Velocity, velocity);
    }
    
    public void setPosition(double position) {
        // PID values
        talonMaster.config_kP(0, 0.1, 100);
        talonMaster.config_kI(0, 0.0, 100);
        talonMaster.config_kD(0, 0.0, 100);
        talonMaster.config_kF(0, 0.01, 100);
        
        
    	talonMaster.set(ControlMode.Position, position);
    }
    
    public void stop() {
    	talonMaster.stopMotor();
    }

}

